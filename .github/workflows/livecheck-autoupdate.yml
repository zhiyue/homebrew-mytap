name: Cask Livecheck 自动更新

on:
  schedule:
    # 每天凌晨 2 点运行 (UTC 时间，相当于北京时间 10 点)
    - cron: '0 2 * * *'
  workflow_dispatch: # 允许手动触发

jobs:
  livecheck-and-update:
    runs-on: macos-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.HOMEBREW_GITHUB_API_TOKEN || github.token }}

      - name: 设置 Homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: 设置 Git
        uses: Homebrew/actions/git-user-config@master

      - name: 列出所有 Cask
        id: list-casks
        run: |
          echo "CASKS=$(ls -1 Casks/*.rb | xargs)" >> $GITHUB_ENV

      - name: 检查更新并更新版本
        id: update-casks
        run: |
          # 创建一个临时文件来存储更新的 cask 名称
          touch updated_casks.txt
          
          # 获取当前时间戳作为唯一标识符
          timestamp=$(date +%s)
          
          # 遍历所有 cask 文件
          for cask_file in $CASKS; do
            cask_name=$(basename "$cask_file" .rb)
            echo "检查 $cask_name 的更新..."
            
            # 运行 livecheck 检查更新
            output=$(brew livecheck --tap="$GITHUB_REPOSITORY" --cask "$cask_name" --json)
            
            # 解析 JSON 输出
            curr_version=$(echo "$output" | jq -r ".[0].version.current")
            latest_version=$(echo "$output" | jq -r ".[0].version.latest")
            
            if [ "$curr_version" != "$latest_version" ] && [ "$latest_version" != "null" ]; then
              echo "$cask_name 可更新: $curr_version -> $latest_version"
              
              # 清理可能存在的分支
              git checkout -f main
              git_branch="bump-${cask_name}-${latest_version}"
              git branch -D "$git_branch" 2>/dev/null || true
              
              # 检查远程是否存在同名分支
              git fetch origin
              if git ls-remote --heads origin refs/heads/"$git_branch" | grep -q "$git_branch"; then
                # 删除远程分支
                git push origin --delete "$git_branch" || true
                # 确保本地分支已删除
                git branch -D "$git_branch" 2>/dev/null || true
              fi
              
              # 手动更新版本号
              cask_file_path="Casks/${cask_name}.rb"
              echo "更新 $cask_file_path 中的版本号从 $curr_version 到 $latest_version"
              
              # 创建新分支
              git checkout -b "$git_branch"
              
              # 修改版本号
              sed -i '' "s/version \"$curr_version\"/version \"$latest_version\"/" "$cask_file_path"
              
              # 提交更改
              git add "$cask_file_path"
              git commit -m "${cask_name}: 更新到 ${latest_version}"
              
              # 推送到远程
              if git push -f origin "$git_branch"; then
                echo "成功推送分支 $git_branch"
                
                # 创建 PR
                pr_body="由自动更新工作流提交的版本更新。\n\n更新 ${cask_name} 从 ${curr_version} 到 ${latest_version}"
                pr_url=$(gh pr create --title "${cask_name}: 更新到 ${latest_version}" --body "$pr_body" --base main --head "$git_branch")
                
                if [ -n "$pr_url" ]; then
                  pr_number=$(echo "$pr_url" | grep -o '[0-9]\+$' || echo "")
                  
                  if [ -n "$pr_number" ]; then
                    echo "$cask_name: $curr_version -> $latest_version (PR #$pr_number)" >> updated_casks.txt
                    
                    # 直接自动合并 PR
                    echo "自动合并 PR #$pr_number..."
                    gh pr merge "$pr_number" --merge --auto --delete-branch
                  else
                    echo "无法从 PR URL 提取 PR 编号: $pr_url"
                  fi
                else
                  echo "创建 PR 失败"
                fi
              else
                echo "推送分支 $git_branch 失败"
              fi
              
              # 切回主分支
              git checkout main
            else
              echo "$cask_name 已是最新版本 ($curr_version)"
            fi
          done
          
          # 检查是否有任何 cask 被更新
          if [ -s updated_casks.txt ]; then
            echo "UPDATED=true" >> $GITHUB_ENV
            echo "UPDATED_CASKS=$(cat updated_casks.txt)" >> $GITHUB_ENV
          else
            echo "UPDATED=false" >> $GITHUB_ENV
          fi
        env:
          HOMEBREW_GITHUB_API_TOKEN: ${{ secrets.HOMEBREW_GITHUB_API_TOKEN || github.token }}
          GH_TOKEN: ${{ secrets.HOMEBREW_GITHUB_API_TOKEN || github.token }}

      - name: 创建摘要
        if: env.UPDATED == 'true'
        run: |
          echo "### Cask 更新摘要 :beer:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "已为以下 cask 创建并尝试自动合并更新 PR：" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "$UPDATED_CASKS" | while IFS= read -r line; do
            echo "- $line" >> $GITHUB_STEP_SUMMARY
          done
        env:
          GH_TOKEN: ${{ secrets.HOMEBREW_GITHUB_API_TOKEN || github.token }}
