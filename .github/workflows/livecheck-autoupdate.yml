name: Cask Livecheck 自动更新

on:
  schedule:
    # 每天凌晨 2 点运行 (UTC 时间，相当于北京时间 10 点)
    - cron: '0 2 * * *'
  workflow_dispatch: # 允许手动触发

jobs:
  livecheck-and-update:
    runs-on: macos-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.HOMEBREW_GITHUB_API_TOKEN || github.token }}

      - name: 配置 Git 远程仓库 URL
        run: |
          git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
        env:
          GITHUB_TOKEN: ${{ secrets.HOMEBREW_GITHUB_API_TOKEN || github.token }}

      - name: 设置 Homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: 设置 Git
        uses: Homebrew/actions/git-user-config@master

      - name: 列出所有 Cask
        id: list-casks
        run: |
          echo "CASKS=$(ls -1 Casks/*.rb | xargs)" >> $GITHUB_ENV

      - name: 检查更新并更新版本
        id: update-casks
        run: |
          # 创建一个临时文件来存储更新的 cask 名称
          touch updated_casks.txt
          
          # 一次性获取所有 cask 的更新信息
          echo "运行命令: brew livecheck --tap=\"$GITHUB_REPOSITORY\" --json"
          all_casks_output=$(brew livecheck --tap="$GITHUB_REPOSITORY" --json)
          
          # 输出原始结果用于调试
          echo "原始 livecheck 输出:"
          echo "$all_casks_output"
          
          # 遍历所有 cask 文件
          for cask_file in $CASKS; do
            cask_name=$(basename "$cask_file" .rb)
            echo "检查 $cask_name 的更新..."
            
            # 从全局结果中提取当前 cask 的信息
            cask_info=$(echo "$all_casks_output" | jq -r ".[] | select(.cask == \"$cask_name\")")
            
            if [ -z "$cask_info" ]; then
              echo "警告：在 livecheck 结果中找不到 $cask_name 的信息，跳过此 cask"
              continue
            fi
            
            # 解析版本信息
            curr_version=$(echo "$cask_info" | jq -r ".version.current")
            latest_version=$(echo "$cask_info" | jq -r ".version.latest")
            is_outdated=$(echo "$cask_info" | jq -r ".version.outdated")
            
            echo "当前版本: $curr_version, 最新版本: $latest_version, 是否过时: $is_outdated"
            
            if [ "$is_outdated" = "true" ]; then
              echo "$cask_name 可更新: $curr_version -> $latest_version"
              
              # 使用唯一的分支名，包含时间戳
              branch_name="bump-${cask_name}-${latest_version}"
              
              # 删除远程可能存在的同名分支
              git fetch origin
              if git ls-remote --heads origin "${branch_name}" | grep -q "${branch_name}"; then
                echo "远程分支 ${branch_name} 已存在，尝试删除..."
                gh api -X DELETE "repos/${GITHUB_REPOSITORY}/git/refs/heads/${branch_name}" || true
              fi
              
              # 创建更详细的提交消息
              commit_message="【自动更新】${cask_name} ${curr_version} → ${latest_version}"

              # 使用 brew bump-cask-pr 命令创建更新 PR，添加 --no-fork 参数
              pr_output=$(HOMEBREW_BUMP_CASK_PR_BRANCH="${branch_name}" brew bump-cask-pr \
                --no-browse \
                --no-audit \
                --no-style \
                --no-fork \
                --message="$commit_message" \
                --version="$latest_version" \
                "${GITHUB_REPOSITORY}/${cask_name}")
              
              # 提取 PR 编号 - 修改匹配模式以适应不同的输出格式
              pr_number=$(echo "$pr_output" | grep -o 'https://github.com/[^ ]*/pull/[0-9]\+' | grep -o '[0-9]\+$' || 
                        echo "$pr_output" | grep -o 'Created pull request.*#[0-9]\+' | grep -o '#[0-9]\+' | tr -d '#' || 
                        echo "")

              if [ -n "$pr_number" ]; then
                echo "$cask_name: $curr_version -> $latest_version (PR #$pr_number)" >> updated_casks.txt
                
                # 直接自动合并 PR
                echo "自动合并 PR #$pr_number..."
                
                # 添加延迟，避免API请求过快导致的问题
                echo "等待3秒后开始合并..."
                sleep 3
                
                # 尝试使用自动合并，如果失败则尝试普通合并
                if ! gh pr merge "$pr_number" --merge --auto --delete-branch; then
                  echo "自动合并失败，尝试直接合并..."
                  gh pr merge "$pr_number" --merge --delete-branch
                fi
              else
                echo "创建 PR 失败，输出: $pr_output"
              fi
            else
              echo "$cask_name 已是最新版本 ($curr_version)"
            fi
          done
          
          # 检查是否有任何 cask 被更新
          if [ -s updated_casks.txt ]; then
            echo "UPDATED=true" >> $GITHUB_ENV
            # 将特殊字符转换为更安全的格式，使用 base64 编码（macOS 兼容）
            ENCODED_CASKS=$(cat updated_casks.txt | base64)
            echo "UPDATED_CASKS_ENCODED=$ENCODED_CASKS" >> $GITHUB_ENV
          else
            echo "UPDATED=false" >> $GITHUB_ENV
          fi
        env:
          HOMEBREW_GITHUB_API_TOKEN: ${{ secrets.HOMEBREW_GITHUB_API_TOKEN || github.token }}
          GH_TOKEN: ${{ secrets.HOMEBREW_GITHUB_API_TOKEN || github.token }}

      - name: 创建摘要
        if: env.UPDATED == 'true'
        run: |
          echo "### Cask 更新摘要 :beer:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "已为以下 cask 创建并尝试自动合并更新 PR：" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          # 解码 base64 编码的内容（macOS 兼容）
          echo "$UPDATED_CASKS_ENCODED" | base64 -D | while IFS= read -r line; do
            echo "- $line" >> $GITHUB_STEP_SUMMARY
          done
        env:
          GH_TOKEN: ${{ secrets.HOMEBREW_GITHUB_API_TOKEN || github.token }}
