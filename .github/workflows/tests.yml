name: brew test-bot for Casks

on:
  push:
    branches:
      - main
    paths:
      - 'Casks/**'
  pull_request:
    paths:
      - 'Casks/**'
  workflow_dispatch:
    inputs:
      pr_number:
        description: '需要测试的PR编号'
        required: false

permissions:
  contents: write
  pull-requests: write

jobs:
  test-bot:
    strategy:
      matrix:
        os: [macos-13, macos-15]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Cache Homebrew Bundler RubyGems
        uses: actions/cache@v4
        with:
          path: ${{ steps.set-up-homebrew.outputs.gems-path }}
          key: ${{ matrix.os }}-rubygems-${{ steps.set-up-homebrew.outputs.gems-hash }}
          restore-keys: ${{ matrix.os }}-rubygems-

      - name: Cleanup before tests
        run: brew test-bot --only-cleanup-before

      - name: Setup for tests
        run: brew test-bot --only-setup

      - name: Check tap syntax
        run: brew test-bot --only-tap-syntax
        continue-on-error: true

      - name: Fix style for Casks
        run: brew style --fix --cask
        continue-on-error: true

      - name: Test changed Casks (Pull Request)
        if: github.event_name == 'pull_request'
        run: |
          # 获取PR中变更的文件
          CHANGED_FILES=$(git diff --name-only "${{ github.event.pull_request.base.sha }}" "${{ github.event.pull_request.head.sha }}" | grep '^Casks/.*\.rb$' || true)
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No Cask files changed in this PR."
            exit 0
          fi
          
          echo "Changed Cask files:"
          echo "$CHANGED_FILES"
          
          # 对每个修改的cask文件执行测试
          for file in $CHANGED_FILES; do
            cask=$(basename "$file" .rb)
            echo "===== Testing Cask: $cask ====="
            
            # 审计cask
            echo "Auditing $cask..."
            brew audit --cask --online "$cask"
            
            # 检查代码风格
            echo "Running style check for $cask..."
            brew style --fix --cask "$cask" || true
            
            # 安装cask
            echo "Installing $cask..."
            brew install --cask "$cask"
            
            # 卸载cask
            echo "Uninstalling $cask..."
            brew uninstall --cask "$cask"
          done

      - name: Test changed Casks (Push)
        if: github.event_name == 'push'
        run: |
          # 获取Push中变更的文件
          CHANGED_FILES=$(git diff --name-only "${{ github.event.before }}" "${{ github.event.after }}" | grep '^Casks/.*\.rb$' || true)
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No Cask files changed in this push."
            exit 0
          fi
          
          echo "Changed Cask files:"
          echo "$CHANGED_FILES"
          
          # 对每个修改的cask文件执行测试
          for file in $CHANGED_FILES; do
            cask=$(basename "$file" .rb)
            echo "===== Testing Cask: $cask ====="
            
            # 审计cask
            echo "Auditing $cask..."
            brew audit --cask --online "$cask"
            
            # 检查代码风格
            echo "Running style check for $cask..."
            brew style --fix --cask "$cask" || true
            
            # 安装cask
            echo "Installing $cask..."
            brew install --cask "$cask"
            
            # 卸载cask
            echo "Uninstalling $cask..."
            brew uninstall --cask "$cask"
          done

      - name: Get PR Info (Workflow Dispatch)
        id: get-pr-info
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.pr_number != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const prNumber = '${{ github.event.inputs.pr_number }}';
            console.log(`Getting info for PR #${prNumber}`);
            
            try {
              const { data: pullRequest } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: parseInt(prNumber)
              });
              
              const { data: files } = await github.rest.pulls.listFiles({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: parseInt(prNumber)
              });
              
              // 筛选出 Casks 目录下的文件
              const caskFiles = files
                .filter(file => file.filename.startsWith('Casks/') && file.filename.endsWith('.rb'))
                .map(file => file.filename);
              
              return JSON.stringify({
                headRefName: pullRequest.head.ref,
                caskFiles: caskFiles
              });
            } catch (error) {
              console.error(`Error getting PR info: ${error}`);
              return '{}';
            }

      - name: Test changed Casks (Workflow Dispatch)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.pr_number != '' && steps.get-pr-info.outputs.result != '{}'
        run: |
          # 解析PR信息
          PR_INFO='${{ steps.get-pr-info.outputs.result }}'
          PR_NUMBER="${{ github.event.inputs.pr_number }}"
          echo "Testing PR #$PR_NUMBER"
          
          # 提取分支名称和变更的文件
          BRANCH_NAME=$(echo "$PR_INFO" | jq -r '.headRefName')
          echo "PR branch: $BRANCH_NAME"
          
          # 获取变更的文件
          CHANGED_FILES=$(echo "$PR_INFO" | jq -r '.caskFiles[]')
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No Cask files changed in this PR."
            exit 0
          fi
          
          echo "Changed Cask files:"
          echo "$CHANGED_FILES"
          
          # 检出PR的分支
          git fetch origin pull/$PR_NUMBER/head:$BRANCH_NAME
          git checkout $BRANCH_NAME
          
          # 对每个修改的cask文件执行测试
          for file in $CHANGED_FILES; do
            cask=$(basename "$file" .rb)
            echo "===== Testing Cask: $cask ====="
            
            # 审计cask
            echo "Auditing $cask..."
            brew audit --tap "${{ github.repository }}" --cask --online "$cask"
            
            # 检查代码风格
            echo "Running style check for $cask..."
            brew style --tap "${{ github.repository }}" --fix --cask "$cask" || true
            
            # 安装cask
            echo "Installing $cask..."
            brew install --tap "${{ github.repository }}" --cask "$cask"
            
            # 卸载cask
            echo "Uninstalling $cask..."
            brew uninstall --tap "${{ github.repository }}" --cask "$cask"
          done

  auto-merge:
    needs: test-bot
    if: >
      (github.event_name == 'pull_request' || github.event.inputs.pr_number != '') &&
      !contains(github.event.pull_request.labels.*.name, 'no-auto-merge')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Auto-merge PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let prNumber;
            let branchName;
            
            if ('${{ github.event_name }}' === 'pull_request') {
              prNumber = context.payload.pull_request.number;
              branchName = context.payload.pull_request.head.ref;
            } else if ('${{ github.event.inputs.pr_number }}' !== '') {
              prNumber = parseInt('${{ github.event.inputs.pr_number }}');
              
              // 获取PR信息
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              
              branchName = pr.head.ref;
            }
            
            if (!prNumber) {
              console.log('No PR number found, skipping auto-merge');
              return;
            }
            
            console.log(`Attempting to merge PR #${prNumber}, branch: ${branchName}`);
            
            try {
              // 检查PR是否来自autobump
              const isAutobump = branchName.startsWith('bump-');
              
              if (isAutobump) {
                console.log('This is an autobump PR, proceeding with auto-merge');
                
                // 合并PR
                await github.rest.pulls.merge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber,
                  merge_method: 'squash'
                });
                
                console.log('PR merged successfully!');
                
                // 删除分支
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `heads/${branchName}`
                });
                
                console.log('Branch deleted successfully!');
              } else {
                console.log('This is not an autobump PR, skipping auto-merge');
              }
            } catch (error) {
              console.error('Error during auto-merge process:', error);
            }