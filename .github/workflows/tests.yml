name: 测试

on:
  push:
    branches:
      - master
    paths:
      - 'Casks/*.rb'
  pull_request:
    paths:
      - 'Casks/*.rb'
  workflow_dispatch:
    inputs:
      pr_number:
        description: '需要测试的PR编号'
        required: true
        type: string

jobs:
  # PR信息获取任务，仅在手动触发且提供PR编号时运行
  get-pr-info:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.pr_number != ''
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.parse-pr-info.outputs.branch_name }}
      has_changes: ${{ steps.parse-pr-info.outputs.has_changes }}
      changed_files: ${{ steps.parse-pr-info.outputs.changed_files }}
    steps:
      - name: Get PR Info
        id: get-pr-info
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const prNumber = '${{ github.event.inputs.pr_number }}';
            console.log(`Getting info for PR #${prNumber}`);
            
            try {
              const { data: pullRequest } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: parseInt(prNumber)
              });
              
              const { data: files } = await github.rest.pulls.listFiles({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: parseInt(prNumber)
              });
              
              // 筛选出 Casks 目录下的文件
              const caskFiles = files
                .filter(file => file.filename.startsWith('Casks/') && file.filename.endsWith('.rb'))
                .map(file => file.filename);
              
              return JSON.stringify({
                headRefName: pullRequest.head.ref,
                caskFiles: caskFiles
              });
            } catch (error) {
              console.error(`Error getting PR info: ${error}`);
              return '{}';
            }

      - name: Parse PR info
        id: parse-pr-info
        if: steps.get-pr-info.outputs.result != '{}'
        run: |
          PR_INFO='${{ steps.get-pr-info.outputs.result }}'
          PR_NUMBER="${{ github.event.inputs.pr_number }}"
          echo "Testing PR #$PR_NUMBER"
          
          # 提取分支名称
          BRANCH_NAME=$(echo "$PR_INFO" | jq -r '.headRefName')
          echo "PR branch: $BRANCH_NAME"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # 获取并保存变更的文件列表
          CHANGED_FILES=$(echo "$PR_INFO" | jq -r '.caskFiles[]' | tr '\n' ',' | sed 's/,$//')
          if [ -z "$CHANGED_FILES" ]; then
            echo "No Cask files changed in this PR."
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changed Cask files: $CHANGED_FILES"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "changed_files=$CHANGED_FILES" >> $GITHUB_OUTPUT
          fi

  # 测试任务：直接调用可重用的工作流
  test-pull-request:
    if: github.event_name == 'pull_request'
    uses: ./.github/workflows/test-casks.yml
    with:
      event_name: pull_request
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-push:
    if: github.event_name == 'push'
    uses: ./.github/workflows/test-casks.yml
    with:
      event_name: push
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-workflow-dispatch:
    if: github.event_name == 'workflow_dispatch' && needs.get-pr-info.outputs.has_changes == 'true'
    needs: get-pr-info
    uses: ./.github/workflows/test-casks.yml
    with:
      event_name: workflow_dispatch
      pr_number: ${{ github.event.inputs.pr_number }}
      branch_name: ${{ needs.get-pr-info.outputs.branch_name }}
      files: ${{ needs.get-pr-info.outputs.changed_files }}
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}